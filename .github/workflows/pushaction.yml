name: Compile and deploy snapshot artifacts

on:
  push:
    branches:
      - master
      - sdl/**
env:
  GRADLE_USER_HOME: .gradle

jobs:
  macos:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 8

    - run: mkdir -p SDL/build-macosarm64
    # No --disable-video for macOS https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=c70c727c98b24ad8b44e05285b8785be15062af0
    - run: ../configure --host=aarch64-apple-darwin CFLAGS="-arch arm64 -fPIC -mmacosx-version-min=10.7" CPPFLAGS="-arch arm64 -fPIC -mmacosx-version-min=10.7" LDFLAGS="-arch arm64 -mmacosx-version-min=10.7" --disable-audio --disable-video-vulkan --disable-render --disable-filesystem --disable-threads --disable-directx --disable-mmx --disable-3dnow --disable-sse --disable-sse2 --disable-sse3 --disable-cpuinfo --disable-sensor --enable-hidapi --disable-joystick-mfi
      working-directory: SDL/build-macosarm64
    - run: make -j
      working-directory: SDL/build-macosarm64

    - run: mkdir -p SDL/build-macos64
    # No --disable-video for macOS https://gitweb.gentoo.org/repo/gentoo.git/commit/?id=c70c727c98b24ad8b44e05285b8785be15062af0
    - run: ../configure CFLAGS="-arch x86_64 -fPIC -mmacosx-version-min=10.7" CPPFLAGS="-arch x86_64 -fPIC -mmacosx-version-min=10.7" LDFLAGS="-arch x86_64 -mmacosx-version-min=10.7" --disable-audio --disable-video-vulkan --disable-render --disable-filesystem --disable-threads --disable-directx --disable-mmx --disable-3dnow --disable-sse --disable-sse2 --disable-sse3 --disable-cpuinfo --disable-sensor --enable-hidapi --disable-joystick-mfi
      working-directory: SDL/build-macos64
    - run: make -j
      working-directory: SDL/build-macos64
    - run: sudo make install
      working-directory: SDL/build-macos64

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew jnigen jnigenBuild
    - name: Upload macOS natives
      uses: actions/upload-artifact@v3
      with:
        name: macos-natives
        path: libs

  linux:
    needs: macos
    runs-on: ubuntu-20.04
    env:
      ORG_GRADLE_PROJECT_GITHUB_USERNAME: ""
      ORG_GRADLE_PROJECT_GITHUB_API_TOKEN: ""
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 8

    - run: sudo sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
    - run: sudo grep "ubuntu.com/ubuntu" /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
    - run: sudo sed -i 's/amd64,i386/armhf,arm64/' /etc/apt/sources.list.d/ports.list
    - run: sudo sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
    - name: Add extra platform architectures
      run: sudo dpkg --add-architecture i386; sudo dpkg --add-architecture armhf; sudo dpkg --add-architecture arm64
    - run: sudo apt-get update || true
    - name: Install Windows compilers
      run: sudo apt-get -yq install g++-mingw-w64-i686 g++-mingw-w64-x86-64
    - name: Install Linux x86 compilers/libraries
      run: sudo apt-get -yq install gcc-multilib g++-multilib linux-libc-dev:i386
    - name: Install Linux arm32 compilers/libraries
      run: sudo apt-get -yq install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
    - name: Install Linux arm64 compilers/libraries
      run: sudo apt-get -yq install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
    - name: Add patches to minimize needed GLIBC version
      run: |
        CURRENT_DIR="$(pwd)"
        sudo apt-get -yq install python3
        # download chromium reversion_glibc.py script from chromium source tree at pinned commit (incase they ever move or change it)
        wget https://raw.githubusercontent.com/chromium/chromium/01bc42d648c45439e1beef8fd25fde3aef9079bc/build/linux/sysroot_scripts/reversion_glibc.py -O /tmp/reversion_glibc.py
        # set targeted minimum GLIBC to 2.17
        sed -i 's/26]/17]/g' /tmp/reversion_glibc.py
        chmod +x /tmp/reversion_glibc.py
        # download the host libc6 package from apt and patch the binaries in it
        # replacing the host libc6 at runtime causes crashs and hangs but apt is able to do it without issue
        sudo apt-get install --download-only --reinstall -y libc6
        sudo rm -rf /tmp/libc6
        sudo mkdir /tmp/libc6
        sudo cp /var/cache/apt/archives/libc6_2.31-*_amd64.deb /tmp/libc6
        cd /tmp/libc6
        deb_name="$(ls)"
        sudo ar x "$deb_name"
        sudo tar xf data.tar.xz
        sudo mkdir DEBIAN
        sudo tar xf control.tar.xz -C DEBIAN
        sudo rm -f control.tar.xz \
          data.tar.xz \
          debian-binary \
          DEBIAN/md5sums \
          DEBIAN/archives \
          DEBIAN/conffiles \
          "$deb_name"

        # patch libc6 in host download deb and cross compilers using the reversion_glibc.py script
        files=(/tmp/libc6/lib/x86_64-linux-gnu/libc.so.6 /tmp/libc6/lib/x86_64-linux-gnu/libm.so.6 \
        /usr/aarch64-linux-gnu/lib/libc.so.6 /usr/aarch64-linux-gnu/lib/libm.so.6 \
        /usr/arm-linux-gnueabihf/lib/libc.so.6 /usr/arm-linux-gnueabihf/lib/libm.so.6 \
        /libx32/libc.so.6 /libx32/libm.so.6 \
        /lib32/libc.so.6 /lib32/libm.so.6 \
        /usr/i686-linux-gnu/lib/libc.so.6 /usr/i686-linux-gnu/lib/libm.so.6)
        for file in "${files[@]}"; do
          [ -f $file ] && sudo python3 /tmp/reversion_glibc.py "$file"
        done

        # install patched libc6 deb
        sudo dpkg-deb -b . "$deb_name"
        sudo apt install --reinstall --allow-downgrades -y ./"$deb_name"
        cd "$CURRENT_DIR"
        # __GLIBC_MINOR__ is used as a feature test macro.  Replace it with the
        # earliest supported version of glibc 2.17
        files=(/usr/include/features.h \
        /usr/aarch64-linux-gnu/include/features.h \
        /usr/arm-linux-gnueabihf/include/features.h \
        /usr/i686-linux-gnu/include/features.h)
        for file in "${files[@]}"; do
          [ -f $file ] && sudo sed -i 's|\(#define\s\+__GLIBC_MINOR__\)|\1 17 //|' "$file"
        done

        # fcntl64() was introduced in glibc 2.28.  Make sure to use fcntl() instead.
        files=(/usr/include/fcntl.h \
        /usr/aarch64-linux-gnu/include/fcntl.h \
        /usr/arm-linux-gnueabihf/include/fcntl.h \
        /usr/i686-linux-gnu/include/fcntl.h)
        for file in "${files[@]}"; do
          [ -f $file ] && sudo sed -i '{N; s/#ifndef __USE_FILE_OFFSET64\(\nextern int fcntl\)/#if 1\1/}' "$file"
        done
        true
    - name: Download macOS natives
      uses: actions/download-artifact@v3
      with:
        name: macos-natives
        path: libs

    - run: find -type f -name "*.h" -exec sed -i 's/extern DECLSPEC//' {} \;
      working-directory: SDL
    - run: sed -i 's/#define SDL_DYNAMIC_API 1/#define SDL_DYNAMIC_API 0/' SDL/src/dynapi/SDL_dynapi.h

    - run: mkdir -p SDL/build-linux64
    - run: ../configure CFLAGS="-fPIC" CPPFLAGS="-fPIC" --disable-audio --disable-video --disable-video-vulkan --disable-render --disable-filesystem --disable-threads --disable-directx --disable-mmx --disable-3dnow --disable-sse --disable-sse2 --disable-sse3 --disable-cpuinfo --disable-sensor --enable-hidapi
      working-directory: SDL/build-linux64
    - run: make -j
      working-directory: SDL/build-linux64

    - run: mkdir -p SDL/build-linux32
    - run: ../configure CFLAGS="-fPIC -m32" CPPFLAGS="-fPIC -m32" LDFLAGS="-m32" --disable-audio --disable-video --disable-video-vulkan --disable-render --disable-filesystem --disable-threads --disable-directx --disable-mmx --disable-3dnow --disable-sse --disable-sse2 --disable-sse3 --disable-cpuinfo --disable-sensor --enable-hidapi
      working-directory: SDL/build-linux32
    - run: make -j
      working-directory: SDL/build-linux32

    - run: mkdir -p SDL/build-linuxarm32
    - run: ../configure --host=arm-linux-gnueabihf CFLAGS="-fPIC" CPPFLAGS="-fPIC" --disable-audio --disable-video --disable-video-vulkan --disable-render --disable-filesystem --disable-threads --disable-directx --disable-mmx --disable-3dnow --disable-sse --disable-sse2 --disable-sse3 --disable-cpuinfo --disable-sensor --enable-hidapi
      working-directory: SDL/build-linuxarm32
    - run: make -j
      working-directory: SDL/build-linuxarm32

    - run: mkdir -p SDL/build-linuxarm64
    - run: ../configure --host=aarch64-linux-gnu CFLAGS="-fPIC" CPPFLAGS="-fPIC" --disable-audio --disable-video --disable-video-vulkan --disable-render --disable-filesystem --disable-threads --disable-directx --disable-mmx --disable-3dnow --disable-sse --disable-sse2 --disable-sse3 --disable-cpuinfo --disable-sensor --enable-hidapi
      working-directory: SDL/build-linuxarm64
    - run: make -j
      working-directory: SDL/build-linuxarm64

    - run: mkdir -p SDL/build-windows32
    - run: ../configure --host=i686-w64-mingw32 --disable-audio --disable-render --disable-power --disable-filesystem --disable-hidapi
      working-directory: SDL/build-windows32
    - run: make -j
      working-directory: SDL/build-windows32

    - run: mkdir -p SDL/build-windows64
    - run: ../configure --host=x86_64-w64-mingw32 --disable-audio --disable-render --disable-power --disable-filesystem --disable-hidapi
      working-directory: SDL/build-windows64
    - run: make -j
      working-directory: SDL/build-windows64

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew jnigen jnigenBuild jnigenJarNativesDesktop
    - name: Upload all output libs
      uses: actions/upload-artifact@v3
      with:
        name: output-libs
        path: build/libs/
    - name: Snapshot build deploy
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      run:
        ./gradlew build publish
